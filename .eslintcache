[{"/Users/nlb/work/nodejs-new/src/index.js":"1","/Users/nlb/work/nodejs-new/test/simple_test.js":"2","/Users/nlb/work/algorithmia-nodejs/src/AlgorithmExecutable.ts":"3","/Users/nlb/work/algorithmia-nodejs/src/Algorithmia.ts":"4","/Users/nlb/work/algorithmia-nodejs/src/AlgorithmiaClient.ts":"5","/Users/nlb/work/algorithmia-nodejs/src/ContentTypeHelper.ts":"6","/Users/nlb/work/algorithmia-nodejs/src/Data.ts":"7","/Users/nlb/work/algorithmia-nodejs/src/HttpClient.ts":"8","/Users/nlb/work/algorithmia-nodejs/src/index.ts":"9","/Users/nlb/work/algorithmia-nodejs/test/AlgorithmExecutable.test.ts":"10","/Users/nlb/work/algorithmia-nodejs/test/Data.test.ts":"11"},{"size":46,"mtime":1608768886937,"results":"12","hashOfConfig":"13"},{"size":102,"mtime":1608768886938,"results":"14","hashOfConfig":"13"},{"size":1260,"mtime":1608773883898,"results":"15","hashOfConfig":"16"},{"size":556,"mtime":1608773872688,"results":"17","hashOfConfig":"16"},{"size":1924,"mtime":1608773867318,"results":"18","hashOfConfig":"16"},{"size":382,"mtime":1608773863984,"results":"19","hashOfConfig":"16"},{"size":1784,"mtime":1608773860855,"results":"20","hashOfConfig":"16"},{"size":1460,"mtime":1608773857333,"results":"21","hashOfConfig":"16"},{"size":425,"mtime":1608773851144,"results":"22","hashOfConfig":"16"},{"size":875,"mtime":1608773890941,"results":"23","hashOfConfig":"16"},{"size":5245,"mtime":1608773900344,"results":"24","hashOfConfig":"16"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1ljm7p8",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":4,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31"},"xvl4br",{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38"},{"filePath":"39","messages":"40","errorCount":4,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41"},{"filePath":"42","messages":"43","errorCount":7,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47"},{"filePath":"48","messages":"49","errorCount":2,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50"},{"filePath":"51","messages":"52","errorCount":20,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53"},"/Users/nlb/work/nodejs-new/src/index.js",[],"/Users/nlb/work/nodejs-new/test/simple_test.js",[],"/Users/nlb/work/algorithmia-nodejs/src/AlgorithmExecutable.ts",["54","55","56","57"],"import { HttpClient } from './HttpClient';\nimport { ContentTypeHelper } from './ContentTypeHelper';\n\nclass AlgorithmExecutable {\n  private client: HttpClient;\n\n  private path: string;\n\n  public constructor(client: HttpClient, path: string) {\n    this.client = client;\n    this.path = path;\n  }\n\n  pipe(\n    input: Object,\n    version?: string,\n    output = 'raw',\n    stdout = false,\n    timeout = 300\n  ) {\n    const contentTypeHelper: ContentTypeHelper = new ContentTypeHelper();\n    let contentType: string;\n\n    contentType = contentTypeHelper.contentTypeHelper(input);\n\n    if (version == undefined) {\n      return this.client.post(\n        `${this.path}/?output=${output}&stdout=${stdout}&timeout=${timeout}`,\n        input,\n        contentType\n      );\n    }\n\n    return this.client.post(\n      `${this.path}/${version}/?output=${output}&stdout=${stdout}&timeout=${timeout}`,\n      input,\n      contentType\n    );\n  }\n}\n\ninterface AlgoResponse {\n  async?: boolean;\n  error?: Error;\n  metadata?: MetaData;\n  request_id?: string;\n  result?: string | Object;\n}\n\ninterface Error {\n  message: string;\n  stacktrace: string;\n}\n\ninterface MetaData {\n  content_type: string;\n  duration: string;\n  stdout: string;\n}\n\nexport { AlgorithmExecutable, AlgoResponse };\n","/Users/nlb/work/algorithmia-nodejs/src/Algorithmia.ts",[],"/Users/nlb/work/algorithmia-nodejs/src/AlgorithmiaClient.ts",[],"/Users/nlb/work/algorithmia-nodejs/src/ContentTypeHelper.ts",["58"],"class ContentTypeHelper {\n  contentTypeHelper(input: Object): string {\n    let contentType: string;\n\n    if (Buffer.isBuffer(input)) {\n      contentType = 'application/octet-stream';\n    } else if (typeof input === 'string') {\n      contentType = 'text/plain';\n    } else {\n      contentType = 'application/json';\n    }\n\n    return contentType;\n  }\n}\n\nexport { ContentTypeHelper };\n","/Users/nlb/work/algorithmia-nodejs/src/Data.ts",["59","60","61","62"],"import { HttpClient } from './HttpClient';\nimport { ContentTypeHelper } from './ContentTypeHelper';\n\nabstract class Data {\n  protected client: HttpClient;\n\n  protected path: string;\n\n  public constructor(client: HttpClient, path: string) {\n    this.client = client;\n    this.path = path.replace(/data\\:\\/\\//, '');\n  }\n\n  baseName(): string {\n    return this.path.slice(this.path.lastIndexOf('/') + 1);\n  }\n\n  parent(): DataDir | null {\n    const offset = this.path.lastIndexOf('/');\n    if (offset >= 0) {\n      return new DataDir(this.client, `data://${this.path.slice(0, offset)}`);\n    }\n\n    return null;\n  }\n}\n\n/*\n * File objects in the Algorithmia Data API\n */\nclass DataFile extends Data {\n  get() {\n    return this.client.get(this.path);\n  }\n\n  put(input: string) {\n    return this.client.put(this.path, input);\n  }\n\n  delete() {\n    return this.client.delete(this.path);\n  }\n\n  exists() {\n    return this.client.head(this.path);\n  }\n}\n\n/*\n# Dir objects in the Algorithmia Data API\n*/\nclass DataDir extends Data {\n  file(fileName: string) {\n    return new DataFile(this.client, `data://${this.path}/${fileName}`);\n  }\n\n  get() {\n    return this.client.get(this.path);\n  }\n\n  put(fileName: string, input: string) {\n    return this.file(fileName).put(input);\n  }\n\n  post(input: string) {\n    const contentTypeHelper: ContentTypeHelper = new ContentTypeHelper();\n    let contentType: string;\n\n    contentType = contentTypeHelper.contentTypeHelper(input);\n\n    return this.client.post(this.path, input, contentType);\n  }\n\n  exists() {\n    return this.client.head(this.path);\n  }\n\n  delete(force: boolean) {\n    return this.client.delete(`${this.path}?force=${force}`);\n  }\n}\n\ninterface DataList {\n  folders: string[];\n  files: string[];\n}\n\nexport { DataFile, DataDir, DataList };\n","/Users/nlb/work/algorithmia-nodejs/src/HttpClient.ts",["63","64","65","66","67","68","69"],"import { HttpClient as TypedHttpClient } from 'typed-rest-client/HttpClient';\nimport { IHeaders } from 'typed-rest-client/Interfaces';\n\nclass HttpClient {\n  private key: string;\n\n  private userAgent = `{User-Agent : algorithmia-nodejs/${process.env.npm_package_version} (NodeJS ${process.version})}`;\n\n  private headers: IHeaders = {};\n\n  private httpClient: TypedHttpClient;\n\n  public constructor(key: string) {\n    this.key = key;\n    this.headers.Authorization = this.key;\n    this.httpClient = new TypedHttpClient(this.userAgent);\n  }\n\n  async get(path: string) {\n    return await this.httpClient.get(path, this.headers).then((x) => {\n      return x.readBody();\n    });\n  }\n\n  async head(path: string) {\n    return await this.httpClient.head(path, this.headers).then((x) => {\n      return x.message.statusCode === 200;\n    });\n  }\n\n  async post(path: string, data: Object, contentType: string) {\n    this.headers['Content-Type'] = contentType;\n    return await this.httpClient\n      .post(path, JSON.stringify(data), this.headers)\n      .then((x) => {\n        return x.readBody();\n      });\n  }\n\n  async put(path: string, data: Object) {\n    return await this.httpClient\n      .put(path, JSON.stringify(data), this.headers)\n      .then((x) => {\n        return x.readBody();\n      });\n  }\n\n  async delete(path: string) {\n    return await this.httpClient.del(path, this.headers).then((x) => {\n      return x.readBody();\n    });\n  }\n}\n\nexport { HttpClient };\n","/Users/nlb/work/algorithmia-nodejs/src/index.ts",["70"],"import { DataFile } from './Data';\nimport { Algorithmia } from './Algorithmia';\n\nexport { Algorithmia } from './Algorithmia';\nexport { AlgorithmiaClient } from './AlgorithmiaClient';\nexport { DataFile, DataDir, DataList } from './Data';\n\nconst file: DataFile = Algorithmia.getClient(\n  process.env.ALGORITHMIA_DEFAULT_API_KEY\n).file('data://dherring/DalesFunTime/NahDawg.txt');\nfile.get().then((x) => {\n  console.log(x);\n});\n","/Users/nlb/work/algorithmia-nodejs/test/AlgorithmExecutable.test.ts",["71","72","73"],"import { strict as assert } from 'assert';\nimport { Algorithmia } from '../src/Algorithmia';\n\ndescribe('Localisation initialization', () => {\n  beforeEach(() => {\n    jest.resetModules();\n  });\n\n  describe('algorithm pipe call', () => {\n    it('invokes algorithm', async (done) => {\n      const input = {\n        user_file: 'data://dherring/DalesFunTime/SpongebobMockingApp.jpg',\n      };\n      const expected =\n        'Before bytes -  14004 after bytes -  24776 result file path - {\"imageSaveLocation\":\"data://dherring/DalesFunTime/save_location.png\",\"rectsSaveLocation\":\"data://dherring/DalesFunTime/save_location.pngrects.txt\"}';\n      Algorithmia.getClient(process.env.ALGORITHMIA_DEFAULT_API_KEY)\n        .algo('dherring/ResultFile')\n        .pipe(input, '0.5.37')\n        .then((x) => {\n          assert.equal(x, expected);\n        });\n      done();\n    });\n  });\n});\n","/Users/nlb/work/algorithmia-nodejs/test/Data.test.ts",["74","75","76","77","78","79","80","81","82","83","84","85","86","87","88","89","90","91","92","93","94","95","96","97","98","99","100","101"],"import { AssertionError, strict as assert } from 'assert';\nimport { Algorithmia } from '../src/Algorithmia';\nimport { DataFile, DataDir, DataList } from '../src/Data';\n\ndescribe('Localisation initialization', () => {\n  beforeEach(() => {\n    jest.resetModules();\n  });\n\n  describe('algorithm file put call', () => {\n    it('puts file', async (done) => {\n      const file: DataFile = Algorithmia.getClient(\n        process.env.ALGORITHMIA_DEFAULT_API_KEY\n      ).file('data://dherring/DalesNotSoFunTime2/NahDawg.txt');\n\n      await file.exists().then((x) => {\n        if (x == true) {\n          file.delete();\n        }\n      });\n\n      await file\n        .parent()\n        ?.exists()\n        .then((x) => {\n          if (x == false) {\n            const dir: DataDir = file.parent()!;\n            const dirName = dir.baseName();\n            const dirParentDir = dir.parent();\n            const dirParentName = dirParentDir?.baseName();\n\n            const dir2: DataDir = Algorithmia.getClient(\n              process.env.ALGORITHMIA_DEFAULT_API_KEY\n            ).dir(dirParentName);\n            dir2.post(dirName);\n          }\n        });\n      await file.put('nah dawg');\n      expect(file.exists());\n      done();\n    });\n  });\n\n  describe('algorithm file parent', () => {\n    it('gets parent', async (done) => {\n      const file: DataFile = Algorithmia.getClient(\n        process.env.ALGORITHMIA_DEFAULT_API_KEY\n      ).file('data://dherring/DalesNotSoFunTime2/NahDawg.txt');\n      assert((await file.parent()?.baseName()) == 'DalesNotSoFunTime2');\n      done();\n    });\n  });\n\n  describe('algorithm file get call', () => {\n    it('gets for file', async (done) => {\n      const file: DataFile = Algorithmia.getClient(\n        process.env.ALGORITHMIA_DEFAULT_API_KEY\n      ).file('data://dherring/DalesFunTime/NahDawg.txt');\n      await file.get().then((x) => {\n        assert.equal(x, 'nah dawg');\n      });\n      done();\n    });\n  });\n\n  describe('algorithm file head call', () => {\n    it('checks for file', async (done) => {\n      const file: DataFile = Algorithmia.getClient(\n        process.env.ALGORITHMIA_DEFAULT_API_KEY\n      ).file('data://dherring/DalesFunTime/NahDawg.txt');\n      await file.exists().then((x) => {\n        assert.equal(x, true);\n      });\n      done();\n    });\n  });\n\n  describe('algorithm file delete call', () => {\n    it('deletes for file', async (done) => {\n      const file: DataFile = Algorithmia.getClient(\n        process.env.ALGORITHMIA_DEFAULT_API_KEY\n      ).file('data://dherring/DalesNotSoFunTime2/NahDawg2.txt');\n      await file.put('nah dawg 2');\n      const expected = { result: { deleted: 1 } };\n      await file.delete().then((x) => {\n        assert.equal(x, JSON.stringify(expected));\n      });\n      done();\n    });\n  });\n\n  describe('algorithm directory head call', () => {\n    it('checks for directory', async (done) => {\n      const dir: DataDir = Algorithmia.getClient(\n        process.env.ALGORITHMIA_DEFAULT_API_KEY\n      ).dir('data://dherring/DalesNotSoFunTime2');\n      await dir.exists().then((x) => {\n        assert.equal(x, true);\n      });\n      done();\n    });\n  });\n\n  describe('algorithm directory post call', () => {\n    it('creates dir', async (done) => {\n      const dir: DataDir = Algorithmia.getClient(\n        process.env.ALGORITHMIA_DEFAULT_API_KEY\n      ).dir('data://dherring/DalesNotSoFunTime3');\n\n      await dir.exists().then((x) => {\n        if (x == true) {\n          dir.delete(true);\n        }\n      });\n\n      await dir.post('DalesNotSoFunTime3');\n      expect(\n        dir.exists().then((x) => {\n          return x;\n        })\n      );\n      done();\n    });\n  });\n\n  describe('algorithm directory file put call', () => {\n    it('puts file', async (done) => {\n      const dir: DataDir = Algorithmia.getClient(\n        process.env.ALGORITHMIA_DEFAULT_API_KEY\n      ).dir('data://dherring/DalesNotSoFunTime2');\n      const file: DataFile = dir.file('YeahDawg.txt');\n\n      await file.exists().then((x) => {\n        if (x == true) {\n          file.delete();\n        }\n      });\n\n      await dir.put(file.baseName(), 'yeah dawg');\n      expect(\n        file.exists().then((x) => {\n          return x;\n        })\n      );\n      done();\n    });\n  });\n\n  describe('algorithm directory get call', () => {\n    it('gets dir', async (done) => {\n      const dir: DataDir = Algorithmia.getClient(\n        process.env.ALGORITHMIA_DEFAULT_API_KEY\n      ).dir('data://dherring/DalesFunTime');\n      await dir.get().then((x) => {\n        const dataList: DataList = JSON.parse(x);\n        assert(dataList.files.length == 7);\n      });\n      done();\n    });\n  });\n\n  describe('algorithm directory delete call', () => {\n    it('deletes directory', async (done) => {\n      const dir: DataDir = Algorithmia.getClient(\n        process.env.ALGORITHMIA_DEFAULT_API_KEY\n      ).dir('data://dherring');\n      await dir.post('DalesNotSoFunTime4');\n      const newDir: DataDir = Algorithmia.getClient(\n        process.env.ALGORITHMIA_DEFAULT_API_KEY\n      ).dir('data://dherring/DalesNotSoFunTime4');\n      const expected = { result: { deleted: 1 } };\n      await newDir.delete(true).then((x) => {\n        assert.equal(x, JSON.stringify(expected));\n      });\n      done();\n    });\n  });\n});\n",{"ruleId":"102","severity":2,"message":"103","line":15,"column":12,"nodeType":"104","messageId":"105","endLine":15,"endColumn":18},{"ruleId":"106","severity":2,"message":"107","line":24,"column":5,"nodeType":"104","messageId":"108","endLine":24,"endColumn":16},{"ruleId":"109","severity":2,"message":"110","line":26,"column":17,"nodeType":"111","messageId":"112","endLine":26,"endColumn":19},{"ruleId":"102","severity":2,"message":"103","line":47,"column":21,"nodeType":"104","messageId":"105","endLine":47,"endColumn":27},{"ruleId":"102","severity":2,"message":"103","line":2,"column":28,"nodeType":"104","messageId":"105","endLine":2,"endColumn":34},{"ruleId":"113","severity":2,"message":"114","line":1,"column":1,"nodeType":"115","messageId":"116","endLine":89,"endColumn":1},{"ruleId":"117","severity":2,"message":"118","line":11,"column":35,"nodeType":"119","messageId":"120","endLine":11,"endColumn":36,"suggestions":"121"},{"ruleId":"122","severity":2,"message":"123","line":21,"column":18,"nodeType":"104","messageId":"124","endLine":21,"endColumn":25},{"ruleId":"106","severity":2,"message":"107","line":69,"column":5,"nodeType":"104","messageId":"108","endLine":69,"endColumn":16},{"ruleId":"125","severity":2,"message":"126","line":20,"column":12,"nodeType":"104","messageId":"127","endLine":22,"endColumn":7},{"ruleId":"125","severity":2,"message":"126","line":26,"column":12,"nodeType":"104","messageId":"127","endLine":28,"endColumn":7},{"ruleId":"102","severity":2,"message":"103","line":31,"column":34,"nodeType":"104","messageId":"105","endLine":31,"endColumn":40},{"ruleId":"125","severity":2,"message":"126","line":33,"column":12,"nodeType":"104","messageId":"127","endLine":37,"endColumn":9},{"ruleId":"102","severity":2,"message":"103","line":40,"column":33,"nodeType":"104","messageId":"105","endLine":40,"endColumn":39},{"ruleId":"125","severity":2,"message":"126","line":41,"column":12,"nodeType":"104","messageId":"127","endLine":45,"endColumn":9},{"ruleId":"125","severity":2,"message":"126","line":49,"column":12,"nodeType":"104","messageId":"127","endLine":51,"endColumn":7},{"ruleId":"128","severity":1,"message":"129","line":12,"column":3,"nodeType":"130","messageId":"112","endLine":12,"endColumn":14},{"ruleId":"131","severity":1,"message":"132","line":10,"column":5,"nodeType":"133","messageId":"134","endLine":23,"endColumn":7},{"ruleId":"135","severity":2,"message":"136","line":10,"column":36,"nodeType":"104","messageId":"137","endLine":10,"endColumn":40},{"ruleId":"138","severity":2,"message":"139","line":10,"column":42,"nodeType":"140","messageId":"141","endLine":10,"endColumn":44},{"ruleId":"142","severity":1,"message":"143","line":1,"column":10,"nodeType":"104","messageId":"144","endLine":1,"endColumn":24},{"ruleId":"135","severity":2,"message":"136","line":11,"column":28,"nodeType":"104","messageId":"137","endLine":11,"endColumn":32},{"ruleId":"109","severity":2,"message":"110","line":17,"column":15,"nodeType":"111","messageId":"112","endLine":17,"endColumn":17},{"ruleId":"109","severity":2,"message":"110","line":26,"column":17,"nodeType":"111","messageId":"112","endLine":26,"endColumn":19},{"ruleId":"145","severity":2,"message":"146","line":39,"column":7,"nodeType":"133","messageId":"147","endLine":39,"endColumn":28},{"ruleId":"131","severity":1,"message":"132","line":45,"column":5,"nodeType":"133","messageId":"134","endLine":51,"endColumn":7},{"ruleId":"135","severity":2,"message":"136","line":45,"column":30,"nodeType":"104","messageId":"137","endLine":45,"endColumn":34},{"ruleId":"148","severity":2,"message":"149","line":49,"column":15,"nodeType":"150","messageId":"151","endLine":49,"endColumn":46},{"ruleId":"109","severity":2,"message":"110","line":49,"column":48,"nodeType":"111","messageId":"112","endLine":49,"endColumn":50},{"ruleId":"131","severity":1,"message":"132","line":55,"column":5,"nodeType":"133","messageId":"134","endLine":63,"endColumn":7},{"ruleId":"135","severity":2,"message":"136","line":55,"column":32,"nodeType":"104","messageId":"137","endLine":55,"endColumn":36},{"ruleId":"131","severity":1,"message":"132","line":67,"column":5,"nodeType":"133","messageId":"134","endLine":75,"endColumn":7},{"ruleId":"135","severity":2,"message":"136","line":67,"column":34,"nodeType":"104","messageId":"137","endLine":67,"endColumn":38},{"ruleId":"131","severity":1,"message":"132","line":79,"column":5,"nodeType":"133","messageId":"134","endLine":89,"endColumn":7},{"ruleId":"135","severity":2,"message":"136","line":79,"column":35,"nodeType":"104","messageId":"137","endLine":79,"endColumn":39},{"ruleId":"131","severity":1,"message":"132","line":93,"column":5,"nodeType":"133","messageId":"134","endLine":101,"endColumn":7},{"ruleId":"135","severity":2,"message":"136","line":93,"column":39,"nodeType":"104","messageId":"137","endLine":93,"endColumn":43},{"ruleId":"135","severity":2,"message":"136","line":105,"column":30,"nodeType":"104","messageId":"137","endLine":105,"endColumn":34},{"ruleId":"109","severity":2,"message":"110","line":111,"column":15,"nodeType":"111","messageId":"112","endLine":111,"endColumn":17},{"ruleId":"145","severity":2,"message":"146","line":117,"column":7,"nodeType":"133","messageId":"147","endLine":121,"endColumn":8},{"ruleId":"135","severity":2,"message":"136","line":127,"column":28,"nodeType":"104","messageId":"137","endLine":127,"endColumn":32},{"ruleId":"109","severity":2,"message":"110","line":134,"column":15,"nodeType":"111","messageId":"112","endLine":134,"endColumn":17},{"ruleId":"145","severity":2,"message":"146","line":140,"column":7,"nodeType":"133","messageId":"147","endLine":144,"endColumn":8},{"ruleId":"131","severity":1,"message":"132","line":150,"column":5,"nodeType":"133","messageId":"134","endLine":159,"endColumn":7},{"ruleId":"135","severity":2,"message":"136","line":150,"column":27,"nodeType":"104","messageId":"137","endLine":150,"endColumn":31},{"ruleId":"109","severity":2,"message":"110","line":156,"column":38,"nodeType":"111","messageId":"112","endLine":156,"endColumn":40},{"ruleId":"131","severity":1,"message":"132","line":163,"column":5,"nodeType":"133","messageId":"134","endLine":176,"endColumn":7},{"ruleId":"135","severity":2,"message":"136","line":163,"column":36,"nodeType":"104","messageId":"137","endLine":163,"endColumn":40},"@typescript-eslint/ban-types","Don't use `Object` as a type. The `Object` type actually means \"any non-nullish value\", so it is marginally better than `unknown`.\n- If you want a type meaning \"any object\", you probably want `Record<string, unknown>` instead.\n- If you want a type meaning \"any value\", you probably want `unknown` instead.","Identifier","bannedTypeMessage","prefer-const","'contentType' is never reassigned. Use 'const' instead.","useConst","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","max-classes-per-file","File has too many classes (3). Maximum allowed is 1.","Program","maximumExceeded","no-useless-escape","Unnecessary escape character: \\:.","Literal","unnecessaryEscape",["152","153"],"@typescript-eslint/no-use-before-define","'DataDir' was used before it was defined.","noUseBeforeDefine","no-return-await","Redundant use of `await` on a return value.","redundantUseOfAwait","no-console","Unexpected console statement.","MemberExpression","jest/expect-expect","Test has no assertions","CallExpression","noAssertions","jest/no-test-callback","Use await instead of callback in async functions","useAwaitInsteadOfCallback","@typescript-eslint/require-await","Async arrow function has no 'await' expression.","ArrowFunctionExpression","missingAwait","@typescript-eslint/no-unused-vars","'AssertionError' is defined but never used.","unusedVar","jest/valid-expect","Expect must have a corresponding matcher call.","matcherNotFound","@typescript-eslint/await-thenable","Unexpected `await` of a non-Promise (non-\"Thenable\") value.","AwaitExpression","await",{"messageId":"154","fix":"155","desc":"156"},{"messageId":"157","fix":"158","desc":"159"},"removeEscape",{"range":"160","text":"161"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"162","text":"163"},"Replace the `\\` with `\\\\` to include the actual backslash character.",[300,301],"",[300,300],"\\"]